}
if (opt$convergence == 0)
opt$convergence <- "successful"
}
if (method == "nlm"){
start <- as.numeric(start)
opt <- nlm(nllh, start, ...)
opt$counts <- opt$iterations
names(opt$counts) <- "function"
opt$value <- opt$minimum
opt$par <- opt$estimate
names(opt$par) <- nm
if (opt$code <= 2)
opt$convergence <- "sucessful"
if (opt$code == 3)
opt$convergence <- "local minimum or 'steptol' is too small"
if (opt$code == 4)
opt$convergence <- "iteration limit reached"
if (opt$code == 5)
opt$convergence <- "optimization failed"
}
if (!(method %in% c("nlm", "nlminb"))){
opt <- optim(start, nllh, ..., method = method, control = control)
if ((opt$convergence != 0) || (opt$value >= 1.0e15)){
if (warn)
warning("optimization may not have succeeded")
if (opt$convergence != 0)
opt$convergence <- "iteration limit reached"
}
else opt$convergence <- "successful"
}
if (opt$value == init.lik){
if (warn)
warning("optimization stayed at the starting values.")
opt$convergence <- "Stayed at start. val."
}
param.names <- param
param <- c(opt$par, unlist(fixed.param))
param <- param[param.names]
##Reset the weights to their original values
if ((length(weights) == 1) && (weights == 0))
weights <- NULL
std.err <- .brownresnickstderr(param, data, dist, loc.dsgn.mat, scale.dsgn.mat,
shape.dsgn.mat, temp.dsgn.mat.loc, temp.dsgn.mat.scale,
temp.dsgn.mat.shape, use.temp.cov, fit.marge = fit.marge,
fixed.param = names(fixed.param),
param.names = param.names, weights = weights)
if (check.grad)
print(round(rbind(numerical = -opt$grad, analytical = std.err$grad), 3))
opt$hessian <- std.err$hess
var.score <- std.err$var.score
ihessian <- try(solve(opt$hessian), silent = TRUE)
if(!is.matrix(ihessian) || any(is.na(var.score))){
if (warn)
warning("Observed information matrix is singular. No standard error will be computed.")
std.err.type <- "none"
}
else{
std.err.type <- "yes"
var.cov <- ihessian %*% var.score %*% ihessian
std.err <- diag(var.cov)
std.idx <- which(std.err <= 0)
if(length(std.idx) > 0){
if (warn)
warning("Some (observed) standard errors are negative;\n passing them to NA")
std.err[std.idx] <- NA
}
std.err <- sqrt(std.err)
if(corr) {
.mat <- diag(1/std.err, nrow = length(std.err))
corr.mat <- structure(.mat %*% var.cov %*% .mat, dimnames = list(nm,nm))
diag(corr.mat) <- rep(1, length(std.err))
}
else
corr.mat <- NULL
colnames(var.cov) <- rownames(var.cov) <- colnames(ihessian) <-
rownames(ihessian) <- names(std.err) <- nm
}
if (std.err.type == "none"){
std.err <- std.err.type <- corr.mat <- NULL
var.cov <- ihessian <- var.score <- NULL
}
ext.coeff <- function(h)
2 * pnorm((h / param["range"])^(0.5 * param["smooth"]) / sqrt(2))
conc.prob <- function(h){
n.sim <- 1000
semivario <- matrix((h / param["range"])^param["smooth"], 2 * n.sim, length(h), byrow = TRUE)
eps <- rnorm(n.sim)
u1 <- pnorm(eps)
eps <- c(eps, -eps)## antithetic
u1 <- c(u1, 1 - u1)
colMeans(1 / (u1 + exp(semivario - sqrt(2 * semivario) * eps) *
pnorm(sqrt(2 * semivario) - eps)))
}
fitted <- list(fitted.values = opt$par, std.err = std.err,
var.cov = var.cov, fixed = unlist(fixed.param), param = param,
deviance = 2*opt$value, corr = corr.mat, convergence = opt$convergence,
counts = opt$counts, message = opt$message, data = data, est = "MPLE",
logLik = -opt$value, opt.value = opt$value, model = "Brown-Resnick", coord = coord,
fit.marge = fit.marge, ext.coeff = ext.coeff, cov.mod = "brown", cov.fun = NA,
loc.form = loc.form, scale.form = scale.form, shape.form = shape.form,
lik.fun = nllh, loc.type = loc.type, scale.type = scale.type, iso = TRUE,
shape.type = shape.type, ihessian = ihessian, var.score = var.score,
marg.cov = marg.cov, nllh = nllh, weighted = weighted, conc.prob = conc.prob)
class(fitted) <- c(fitted$model, "maxstab")
return(fitted)
}
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
cov.type <- "brown"
number_of_reps <- 1
range <- 1
smooth <- 1
dist_constraint <- 10
weights <- as.numeric(distance(coord_mat) < dist_constraint)
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = range,
smooth = smooth)
r.init <- 1
s.init <- 1
fit1 <- fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = .0001, maxit = 10000),
start = list(range = r.init,smooth = s.init), fit.marge = FALSE)
source("SpatialExtremes-master/R/brownresnick.R")
source("SpatialExtremes-master/src/brownResnick.c")
source("SpatialExtremes-master/R/brownresnick.R")
source("simulation_studies.Rmd")
source("SpatialExtremes-master/R/brownresnick.R")
source("SpatialExtremes-master/src/brownResnick.R")
source("SpatialExtremes-master/R/brownresnick.R")
source("SpatialExtremes-master/src/brownResnick.c")
?source
source("SpatialExtremes-master/R/brownresnick.R")
dyn.load("SpatialExtremes-master/src/brownResnick.c")
source("SpatialExtremes-master/R/brownresnick.R")
fitmaxstab <- function(data, coord, cov.mod, loc.form, scale.form, shape.form,
marg.cov = NULL, temp.cov = NULL, temp.form.loc = NULL,
temp.form.scale = NULL, temp.form.shape = NULL, iso = FALSE,
..., fit.marge = FALSE, warn = TRUE, method = "Nelder", start,
control = list(), weights = NULL, corr = FALSE, check.grad = FALSE){
if (is.null(dim(coord))){
if (length(coord) != ncol(data))
stop("'data' and 'coord' don't match")
}
else if (nrow(coord) != ncol(data))
stop("'data' and 'coord' don't match")
if (!is.null(marg.cov) && is.null(colnames(marg.cov)))
stop("'marg.cov' must have named columns")
if (!is.null(marg.cov) && (nrow(marg.cov) != nrow(coord)))
stop("'data' and 'marg.cov' don't match")
if (missing(loc.form) && missing(scale.form) && missing(shape.form))
reg.mod <- "full"
if (!missing(loc.form) && !missing(scale.form) && !missing(shape.form)){
reg.mod <- "spatgev"
fit.marge <- TRUE
if ((class(loc.form) != "formula") || (class(scale.form) != "formula") ||
(class(shape.form) != "formula"))
stop("''loc.form'', ''scale.form'' and ''shape.form'' must be valid R formulas")
}
flag <- missing(loc.form) + missing(scale.form)  + missing(shape.form)
if (!(flag %in% c(0, 3)))
stop("if one formula is given for the GEV parameters, then it should
be given for *ALL* GEV parameters")
n.pairs <- ncol(data) * (ncol(data) - 1) / 2
if (!is.null(weights) && (!is.numeric(weights) || length(weights) != n.pairs ||
all(weights == 0)))
stop("The weights you specified are not valid")
if (method != "nlminb"){
if (is.null(control$maxit))
control$maxit <- 10000
}
else{
if (is.null(control$eval.max))
control$eval.max <- 15000
if (is.null(control$iter.max))
control$iter.max <- 10000
}
if (check.grad)
## Force to use the nlm optimizer as it returns the numerical gradient
method <- "nlm"
if (cov.mod == "gauss")
fitted <- switch(reg.mod,
"full" = smithfull(data, coord, ..., fit.marge = fit.marge, iso = iso,
warn = warn, method = method, control = control, check.grad = check.grad,
corr = corr, start = start, weights = weights),
"spatgev" = smithform(data, coord, ..., loc.form = loc.form, scale.form = scale.form,
shape.form = shape.form, fit.marge = fit.marge, iso = iso, marg.cov = marg.cov,
warn = warn, method = method, control = control, corr = corr, start = start, weights = weights,
temp.cov = temp.cov, temp.form.loc = temp.form.loc, check.grad = check.grad,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
else if (cov.mod == "brown")
fitted <- switch(reg.mod,
"full" = brownresnickfull(data, coord, ..., fit.marge = fit.marge,
warn = warn, method = method, control = control,
corr = corr, start = start, weights = weights, check.grad = check.grad),
"spatgev" = brownresnickform(data, coord, ..., loc.form = loc.form,
scale.form = scale.form, shape.form = shape.form, check.grad = check.grad,
fit.marge = fit.marge, marg.cov = marg.cov, warn = warn,
method = method, control = control, corr = corr,
start = start, weights = weights, temp.cov = temp.cov, temp.form.loc = temp.form.loc,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
else if (substr(cov.mod, 1, 1) == "i")
fitted <- switch(reg.mod,
"full" = schlatherindfull(data, coord, cov.mod = substr(cov.mod, 2, 8),
..., fit.marge = fit.marge, warn = warn, check.grad = check.grad,
method = method, control = control,
corr = corr, start = start, weights = weights),
"spatgev" = schlatherindform(data, coord, cov.mod = substr(cov.mod, 2, 8), ...,
loc.form = loc.form, scale.form = scale.form, shape.form = shape.form,
fit.marge = fit.marge, marg.cov = marg.cov, warn = warn, check.grad = check.grad,
method = method, control = control, corr = corr,
start = start, weights = weights, temp.cov = temp.cov, temp.form.loc = temp.form.loc,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
else if (substr(cov.mod, 1, 1) == "g")
fitted <- switch(reg.mod,
"full" = geomgaussfull(data, coord, cov.mod = substr(cov.mod, 2, 8),
..., fit.marge = fit.marge, warn = warn, check.grad = check.grad,
method = method, control = control,
corr = corr, start = start, weights = weights),
"spatgev" = geomgaussform(data, coord, cov.mod = substr(cov.mod, 2, 8), ...,
loc.form = loc.form, scale.form = scale.form, shape.form = shape.form,
fit.marge = fit.marge, marg.cov = marg.cov, warn = warn, check.grad = check.grad,
method = method, control = control, corr = corr,
start = start, weights = weights, temp.cov = temp.cov, temp.form.loc = temp.form.loc,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
else if (substr(cov.mod, 1, 1) == "t")
fitted <- switch(reg.mod,
"full" = extremaltfull(data, coord, cov.mod = substr(cov.mod, 2, 8),
..., fit.marge = fit.marge, warn = warn, check.grad = check.grad,
method = method, control = control,
corr = corr, start = start, weights = weights),
"spatgev" = extremaltform(data, coord, cov.mod = substr(cov.mod, 2, 8), ...,
loc.form = loc.form, scale.form = scale.form, shape.form = shape.form,
fit.marge = fit.marge, marg.cov = marg.cov, warn = warn, check.grad = check.grad,
method = method, control = control, corr = corr,
start = start, weights = weights, temp.cov = temp.cov, temp.form.loc = temp.form.loc,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
else
fitted <- switch(reg.mod,
"full" = schlatherfull(data, coord, cov.mod = cov.mod,
..., fit.marge = fit.marge, warn = warn, check.grad = check.grad,
method = method, control = control,
corr = corr, start = start, weights = weights),
"spatgev" = schlatherform(data, coord, cov.mod = cov.mod, ...,
loc.form = loc.form, scale.form = scale.form, shape.form = shape.form,
fit.marge = fit.marge, marg.cov = marg.cov, warn = warn, check.grad = check.grad,
method = method, control = control, corr = corr,
start = start, weights = weights, temp.cov = temp.cov, temp.form.loc = temp.form.loc,
temp.form.scale = temp.form.scale, temp.form.shape = temp.form.shape))
return(fitted)
}
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
cov.type <- "brown"
number_of_reps <- 1
range <- 1
smooth <- 1
dist_constraint <- 10
weights <- as.numeric(distance(coord_mat) < dist_constraint)
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = range,
smooth = smooth)
r.init <- 1
s.init <- 1
fit1 <- fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = .0001, maxit = 10000),
start = list(range = r.init,smooth = s.init), fit.marge = FALSE)
dyn.load("SpatialExtremes-master/R/brownResnick.so")
dyn.load("SpatialExtremes-master/R/brownResnick.so")
source("fitmaxstable.R")
source("fitmaxstable.R")
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coords, "brown",
weights = dist_weig,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord, "brown",
weights = dist_weig,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord_mat, "brown",
weights = dist_weig,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/fitmaxstable.R")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/src/brownResnick.c")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/src/brownResnick.so")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("brownResnick.so")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("src/brownResnick.so")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("src/brownResnick.so")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/src/header.h")
source("/home/juliatest/Desktop/spatial_extremes/my-spatial-extremes/R/fitmaxstable.R")
dyn.load("src/brownResnick.so")
dyn.load("src/util.so")
dyn.load("src/utils.so")
dyn.load("src/brownResnick.so")
utils::gev2french()
gev2frech()
?gev2frech
detach(package:SpatialExtremes,unload=TRUE)
?gev2frech
dyn.load("src/utils.so")
dyn.load("src/brownResnick.so")
.C(C_gev2frech())
library("SpatialExtremes")
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 1
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit = fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = .1, maxit =10000),
start = list(range = r.init,smooth = s.init))
library("SpatialExtremes")
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 500
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 500
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit <- fitmaxstab(y, coords, "brown",
weights = dist_weig,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 500
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
fit <- fitmaxstab(y, coord_mat, "brown",
weights = dist_weig,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
dist_constraint < 2
weights <- as.numeric(distance(coord_mat) < dist_constraint)
cov.type <- "brown"
number_of_reps <- 500
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = 1,
smooth = 1)
r.init <- 1
s.init <- 1
fit <- fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = 100, maxit = 0),
start = list(range = r.init,smooth = s.init))
library(SpatialExtremes)
library(reticulate)
nn <- 25
n.beginning <- 0
n.end <- 20
x <- y <- seq(n.beginning, n.end, length = nn)
coord <- expand.grid(x,y)
coord_mat = cbind(coord$Var1, coord$Var2)
cov.type <- "brown"
number_of_reps <- 10
range <- 1
smooth <- 1
dist_constraint <- 10
weights <- as.numeric(distance(coord_mat) < dist_constraint)
y <- rmaxstab(number_of_reps, coord, cov.mod = cov.type, range = range,
smooth = smooth)
r.init <- 1
s.init <- 1
fit1 <- fitmaxstab(y, coord_mat, "brown",
weights = weights,
method = "L-BFGS-B",
control = list(pgtol = .0001, maxit = 10000),
start = list(range = r.init,smooth = s.init), fit.marge = FALSE)
